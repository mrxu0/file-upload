{"version":3,"file":"index.js","sources":["../../lib/types.ts","../../lib/Tapable.ts","../../lib/Concurrency.ts","../../lib/FileUpload.ts"],"sourcesContent":["export interface File extends Blob {\r\n    size:number,\r\n    slice: (start: number, end: number) => File,\r\n    name: string\r\n}\r\n\r\nexport type Params = {\r\n    concurrency?: number,\r\n    chunkSize?: number,\r\n    locale?: string,\r\n    again?: number,\r\n    file?: File,\r\n    debug?: CONSOLE_ENUM[] | undefined\r\n}\r\n\r\nexport type RequestParams = {\r\n    url: string,\r\n    method?: string,\r\n    headers?: any,\r\n    data?: any,\r\n    onProgress?:((this: XMLHttpRequest, ev: ProgressEvent) => any) | null;\r\n    requestList?: XMLHttpRequest[]\r\n}\r\n\r\nexport type VerifyUpload = {\r\n    shouldUpload: boolean, // 是否应该上传，否代表文件早已经上传过了\r\n    uploadedList: number[], // 已经上传 chunks 的 hash 列表\r\n}\r\n\r\nexport enum CONSOLE_ENUM {\r\n    error=\"error\",\r\n    log=\"log\",\r\n    warn=\"warn\"\r\n}","import {CONSOLE_ENUM} from './types'\r\ntype EVENTS = {\r\n    [propName:string]: ((...args: any[]) => any)[] | undefined\r\n}\r\nexport default class Tapable {\r\n    events:EVENTS\r\n    debug: CONSOLE_ENUM[] | undefined\r\n    constructor(debug:CONSOLE_ENUM[] | undefined) {\r\n        this.events = {}\r\n        this.debug = debug\r\n    }\r\n\r\n    on(name: string, callback:((args:any)=>any)):void {\r\n        if(this.events[name]) {\r\n            this.events[name]?.push(callback)\r\n        } else {\r\n            this.events[name] = [callback]\r\n        }\r\n    }\r\n\r\n    emit(name:string, ...args:any[]):void {\r\n        if(this.events[name]) {\r\n            this.events[name]?.forEach(item => {\r\n                item(...args)\r\n            })\r\n        } else {\r\n            this.log(`【${name}】 还没有注册`, CONSOLE_ENUM.warn)\r\n        }\r\n    }\r\n\r\n    log(msg: string, mode = CONSOLE_ENUM.log): void {\r\n        if(this.debug?.includes(mode)) {\r\n            console[mode]('【FileUpload】 ' + msg)\r\n        }\r\n        // let allowMode = [CONSOLE_ENUM.error]\r\n        // if (this.debug === CONSOLE_ENUM.info || this.debug === CONSOLE_ENUM.log) {\r\n        //     allowMode.push(CONSOLE_ENUM.warn, CONSOLE_ENUM.error)\r\n        // }\r\n        // if (this.debug === CONSOLE_ENUM.warn) {\r\n        //     allowMode.push(CONSOLE_ENUM.warn)\r\n        // }\r\n        // if (allowMode.includes(mode)) {\r\n        //     console[mode]('【FileUpload】 ' + msg)\r\n        // }\r\n    }\r\n}","import AggregateError from 'aggregate-error'\r\n\r\nexport default async (\r\n\titerable:(() => Promise<any>)[],\r\n\tmapper:(arg1:any, index:number) => any,\r\n\t{\r\n\t\tconcurrency = Infinity,\r\n        stopOnError = true,\r\n        again = 3\r\n\t} = {}\r\n):Promise<any> => {\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tif (typeof mapper !== 'function') {\r\n\t\t\tthrow new TypeError('Mapper function is required');\r\n\t\t}\r\n\r\n\t\tif (!((Number.isSafeInteger(concurrency) || concurrency === Infinity) && concurrency >= 1)) {\r\n\t\t\t// throw new TypeError(`Expected \\`concurrency\\` to be an integer from 1 and up or \\`Infinity\\`, got \\`${concurrency}\\` (${typeof concurrency})`);\r\n\t\t\tthrow new TypeError(`期望 \\`concurrency\\` 是一个整数并且大于 0 或者是 \\`Infinity\\`, 得到的是： \\`${concurrency}\\` (${typeof concurrency})`);\r\n        }\r\n        \r\n\t\tconst result:any[] = [];\r\n\t\tconst errors:any[] = [];\r\n\t\tconst iterator = iterable[Symbol.iterator]();\r\n\t\tlet isRejected = false;\r\n\t\tlet isIterableDone = false;\r\n\t\tlet resolvingCount = 0;\r\n\t\tlet currentIndex = 0;\r\n\r\n\t\tconst next = ():void => {\r\n\t\t\tif (isRejected) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tconst nextItem = iterator.next();\r\n\t\t\tconst index = currentIndex;\r\n\t\t\tcurrentIndex++;\r\n\r\n\t\t\tif (nextItem.done) {\r\n\t\t\t\tisIterableDone = true;\r\n\r\n\t\t\t\tif (resolvingCount === 0) {\r\n\t\t\t\t\tif (!stopOnError && errors.length !== 0) {\r\n\t\t\t\t\t\treject(new AggregateError(errors));\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresolve(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tresolvingCount++;\r\n\r\n\t\t\t(async ():Promise<any> => {\r\n                let value = nextItem.value;\r\n                let again1 = again\r\n                while(again1) {\r\n                    try {\r\n                        const element : Promise<any> = await value()\r\n                        result[index] = await mapper(element, index);\r\n                        resolvingCount--;\r\n                        again1 = 0\r\n                        next();\r\n                    } catch (error) {\r\n                        again1--\r\n                        if(again1 <= 0) { \r\n                            if (stopOnError) {\r\n                                isRejected = true;\r\n                                reject(error);\r\n                            } else {\r\n                                errors.push(error);\r\n                                resolvingCount--;\r\n                                next();\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\t\t\t})();\r\n\t\t};\r\n\r\n\t\tfor (let i = 0; i < concurrency; i++) {\r\n\t\t\tnext();\r\n\r\n\t\t\tif (isIterableDone) {\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n};\r\n","import { Params, File, RequestParams, VerifyUpload, CONSOLE_ENUM } from './types'\r\nimport Tapable from \"./Tapable\";\r\nimport concurrency from './Concurrency';\r\nconst ONE_M = 1024 * 1024; // 1M\r\nexport default class FileUpload extends Tapable { \r\n    params: Params = { chunkSize: 5, concurrency: 5, locale: 'zh', again: 3, debug: undefined }\r\n    hash = ''\r\n    hashPercentage = 0\r\n    data: any[] = []\r\n    requestList: XMLHttpRequest[] | undefined\r\n\r\n    constructor(params: Params) {\r\n        super(params.debug)\r\n        this.params = Object.assign(this.params, params)\r\n        this.params.chunkSize = this.params.chunkSize ? this.params.chunkSize * ONE_M : 5 * ONE_M\r\n    } \r\n\r\n    addFile(file: File): void {\r\n        if (!this.params.file) {\r\n            this.params.file = file\r\n        } else {\r\n            this.log('已经有文件，请不要重复添加', CONSOLE_ENUM.error)\r\n        }\r\n    }\r\n\r\n    async startUpload(): Promise<void> {\r\n        try {\r\n            if (!this.params.file) {\r\n                this.log('请先传入文件，在开始上传', CONSOLE_ENUM.error)\r\n                return\r\n            }\r\n            const fileChunkList = this.createFileChunk(this.params.file, this.params.chunkSize)\r\n            this.log(`代码分块完成，分为 ${fileChunkList.length} 块`)\r\n            let startTime = Date.now()\r\n            this.hash = await this.calculateHash(fileChunkList)\r\n            this.log(`hash 计算完成，耗时为: ${Date.now() - startTime} ms`)\r\n            const returnVerify = await this.verifyUpload(\r\n                this.params.file.name,\r\n                this.hash\r\n            );\r\n            if(returnVerify) {\r\n                let { shouldUpload, uploadedList } = returnVerify\r\n                if (!shouldUpload) {\r\n                    this.emit('process', 100)\r\n                    this.emit('sucess', { status: 1 })\r\n                    this.log('该文件已经上传过，因此秒传')\r\n                    return;\r\n                }\r\n                this.data = fileChunkList.map((file, index) => ({\r\n                    fileHash: this.hash,\r\n                    index,\r\n                    hash: this.hash + \"-\" + index,\r\n                    chunk: file,\r\n                    size: file.size,\r\n                    percent: uploadedList.includes(index) ? 100 : 0\r\n                }));\r\n                await this.uploadChunks(uploadedList, this.params.file);\r\n            }\r\n        } catch (error) {\r\n            \r\n        }\r\n    }\r\n\r\n    // 上传切片，同时过滤已上传的切片\r\n    async uploadChunks(uploadedList: number[] = [], file: File): Promise<void> {\r\n        const requestList = this.data\r\n            .filter(({ hash }) => !uploadedList.includes(hash))\r\n            .map(({ chunk, hash, index }) => {\r\n                const formData = new FormData();\r\n                formData.append(\"chunk\", chunk);\r\n                formData.append(\"hash\", hash);\r\n                formData.append(\"fileHash\", this.hash);\r\n                formData.append(\"filename\", file.name);\r\n                return { formData, index };\r\n            })\r\n            .map(({ formData, index }) =>\r\n                this.request({\r\n                    url: \"http://localhost:3000\",\r\n                    data: formData,\r\n                    onProgress: this.createProgressHandler(this.data[index], file),\r\n                })\r\n            );\r\n            let result = await concurrency(requestList, () => {}, { concurrency: this.params.concurrency, again: this.params.again})\r\n            if(!Array.isArray(result)) {\r\n                this.emit('error', { status: 2, message: '上传请求报错'})\r\n                this.log('上传请求报错', CONSOLE_ENUM.error)\r\n                return \r\n            }\r\n            // 之前上传的切片数量 + 本次上传的切片数量 = 所有切片数量时\r\n            // 合并切片\r\n            if (uploadedList.length + requestList.length === this.data.length) {\r\n                await this.mergeRequest(file);\r\n            }\r\n    }\r\n\r\n    createFileChunk(file: File, size = ONE_M * 10): File[] {\r\n        const fileChunkList: File[] = [];\r\n        let cur = 0;\r\n        while (cur < file.size) {\r\n            fileChunkList.push(file.slice(cur, cur + size));\r\n            cur += size;\r\n        }\r\n        return fileChunkList;\r\n    }\r\n\r\n    calculateHash(fileChunkList: File[]): Promise<string> {\r\n        return new Promise(resolve => {\r\n            let worker = new Worker(\"/hash.js\");\r\n            worker.postMessage({ fileChunkList });\r\n            worker.onmessage = (e): void => {\r\n                const { hash, percent } = e.data;\r\n                this.emit('process', percent * 0.25)\r\n                if (hash) {\r\n                    resolve(hash);\r\n                }\r\n            };\r\n        });\r\n    }\r\n\r\n    async verifyUpload(filename: string, fileHash: string): Promise<VerifyUpload | undefined> {\r\n        let options: RequestParams = {\r\n            url: \"http://localhost:3000/verify\",\r\n            headers: {\r\n                \"content-type\": \"application/json\"\r\n            },\r\n            data: JSON.stringify({\r\n                filename,\r\n                fileHash\r\n            })\r\n        }\r\n        try {\r\n            const { data } = await this.request(options)();\r\n            return JSON.parse(data);       \r\n        } catch (error) {\r\n            this.emit('error', { status: 3, message: '验证请求报错'})\r\n            this.log('验证请求报错', CONSOLE_ENUM.error)\r\n        }\r\n    }\r\n\r\n    // 用闭包保存每个 chunk 的进度数据\r\n    createProgressHandler(item: any, file: File): (ev: ProgressEvent) => any {\r\n        return (e): void => {\r\n            item.percent = parseInt(String((e.loaded / e.total) * 100));\r\n            if (file || !this.data.length) {\r\n                this.emit('process', 0)\r\n            }\r\n            const loaded = this.data.map(item1 => item1.size * item1.percent).reduce((acc, cur) => acc + cur);\r\n            let precent = parseInt((loaded / file.size).toFixed(2)) * 0.75 + 25\r\n            this.emit('process', precent)\r\n        };\r\n    }\r\n\r\n    request({\r\n        url,\r\n        method = \"post\",\r\n        data,\r\n        headers = {},\r\n        onProgress = (): any => { },\r\n    }: RequestParams): (() => Promise<any>) {\r\n        return function ():Promise<any> {\r\n            return new Promise(resolve => {\r\n                const xhr = new XMLHttpRequest();\r\n                xhr.upload.onprogress = onProgress;\r\n                xhr.open(method, url);\r\n                Object.keys(headers).forEach(key =>\r\n                    xhr.setRequestHeader(key, headers[key])\r\n                );\r\n                xhr.send(data);\r\n                xhr.onload = (e: any): void => {\r\n                    resolve({\r\n                        data: e.target.response\r\n                    });\r\n                };\r\n            });\r\n        }\r\n    }\r\n\r\n    // 通知服务端合并切片\r\n    async mergeRequest(file: File): Promise<void> {\r\n        try {\r\n            await this.request({\r\n                url: \"http://localhost:3000/merge\",\r\n                headers: {\r\n                    \"content-type\": \"application/json\"\r\n                },\r\n                data: JSON.stringify({\r\n                    size: this.params.chunkSize,\r\n                    fileHash: this.hash,\r\n                    filename: file.name\r\n                })\r\n            })()\r\n            this.emit('sucess')\r\n        } catch (error) {\r\n            this.emit('error', { status: 4, message: '合并请求报错'})\r\n            this.log('合并请求报错', CONSOLE_ENUM.error)\r\n        }\r\n    }\r\n}"],"names":["AggregateError"],"mappings":"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"}